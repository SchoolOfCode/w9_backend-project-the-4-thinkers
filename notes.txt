PLAN FOR TUESDAY 21 JUNE
- did we want to install npx express generator?
- need to install pg WRITE npm install pg
- we need to hook up our .env in scripts WRITE
"dev": "nodemon -r dotenv/config"

- after that populate the index.js file 
- decide if we are using ES6/CommonJs
- make sure to edit our scripts in package.json file along the way 


Complete a Get all comments route
- Possible Solution
1) In comments.js file in routes folder we are going to want to use the express.Router + express
    const express = require('express');
    const router = express.Router()

?) In app file we will have code to redirect to comments.js file 
- get basic imports here   
    const express = require("express");
    const app = express ();
    const port = 3000;
- here we are telling app where to go to deal with get all comments data and we are saving it in a variable bcs we will use it frequently 
    const commentsRouter = require("./routes/comments.js")
- we want to export this app 
    export default app;

- we use app.use to say that anything in the URI path "/comments" go to the commentsRouter to deal with it 
    app.use("/", commentsRouter)
?) basic code skeleton of an router.get function 
    router.get("/", function)(req, res){
        const responseObject = {
            success:true,
            message:
            data:
        };
        res.json(?);
    }
module.exports = router;
- remember to export your router

Populate the data // setting up Heroku
- Possible Solution
1) in our db folder inside the file index.js we want to import pg and set up pool 
(written for commonjs)
const { Pool } = require('pg')
const pool = new Pool()
module.export = {
    query: (text, params, callback) =>{
        return pool.query(text,params,callback)
    },
}
(written for ES6)
import pg from "pg";
const pool = new pg.Pool();
export function query(text, params, callback){
    return pool.query(text, params, callback);
}

2)we want to hook up our Heroku credentials within the pool in our index.js file in db 
const pool = new pg.Pool({
    user: process.env.PGUSER,
    host: process.env.PGHOST,
    database: process.env.PGDATABASE,
    password: process.env.PGPASSWORD,
    port: process.env.PGPORT,
})

3) in scripts folder - file createTable.js 
- we need to import query function 
- whatever table we have save it in sqlString


CREATE TABLE comments (
    comments_id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    page:
    pageid:
);




Access in the browser 
- Possible Solution 
- need to google 

